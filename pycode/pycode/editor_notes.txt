KNOWN BUGS + ISSUES TO ADDRESS:
====================

1- Close button on tab does NOT close the tab window.

2- Syntax highlighter keeps freezing when new code is added. At the moment, Not sure as to why.


General NOTES:
==============
- I've been struggling with getting this text editor to do what i want it to due to the ignorance on my part of the built-in inherited functions from the QWidget
class. EVERY widget inherits from this QWidget class and i've been only looking at the actually widget docs themselves, not seeing the connection between them. This has undoubtedly made the process harder for myself. At least now i know. I will keep it as a reference.

- i think i may need to construct the findbox QDockWidget separately from the actual logic of the find operation.

- use self.settings.clear() during initial construction if settings begins to throw harmless errors

- PySide.QtCore.Qt.NavigationMode can be used to change the tab focus behavior

!IMPORTANT: I believe there is a major lack of foresight regarding my use of root to perform the tests. I know, quite glibly, the root user env may affect 
setup and use.

!- I plan on making the whole editor customizable. I will get to the style and various layout options when the CORE functionality is set and stable.

personal note:- I need to be more aware of scope and referencing when it comes to coding in general.

- I think i should develop a separate module for keyboard shortcuts and syntax highlighting classes.

- I think i can modify the x button that appears on the tab by creating a custom widget and setting it with QTabBar.setTabButton()/
	I should consider using a custom QTabBar instead of the built-in one. This should give me much more flexibility in designing & coding it.

- Later on i can make the shortcuts customizable using the isEnabled() method of the QShortcut class.

- need to find a way to condense the tab width actions... 


- i could leave off inializing a new document automatically and instead start the app with a no open tabs.

- browse cxfreeze and github PySide repository. Consider getting into active PySide development and utlizing cxfreeze for PyCode's distribution.

- now that i have styling available, i must consider how to merge this harmoniously with syntax highlighting. Im thinking I can define a complete stylesheet theme that would include the syntax colors with it. i.e. the colors to be used in contrast to the background are defined WITHIN the style sheet.

In order to implement the build system, i will have to use the os module and learn about the different system command line commands that would run the focused tab document.

- use .Anchor at, .setposition, movepos to manipulate the cursor to select

- i can set background to visible when i put line counting into the text editor.

TO-DO LIST:
==========

- allow a untitled tab to appear ONLY when there is no tabs available from previous session. OR get rid of it completely.

- add a cheat sheet for commonly used programs

- add option for dynamic theme switching


- allow focus change by using tab ??? <may be unnecessary>???

- fix find action to highlight found text IN document area

- add options for various layouts

- utilize a layout for the main window

- Make a command that copies the entire document and prompts the user for a new filename. Use the QFile object.

- add line and column count to status bar

- successfully fix and implement syntax highlighting

- fix tab button not closing tab

- I will, Inshallah, use QtGui.QCompleter to implement the auto-complete function based upon pre-defined item models. This will automatically look for the commonly
	known blocks of code and finish fill it in for the user.

- fix the pgdn fail to recognize bug

- add build system and ability to run commands in console from app itself

- add autosave feature

- use QThread to check if document has been modified * may not be necessary

UPDATES SINCE LAST GIT COMMIT:
==============================
- able to reopen a closed application with the previous work state automatically loaded. i.e. same number of tabs and settings
- fix QShortcut throwing Ambiguously activated signal.
- Rewrite the settings definition to NOT use setgeometry.

NOTED FIXES:
==============
- fixed ambigious shortcut overload. Most specify focused window to close

- for now, QPlainTextEdit is fine.

- I was able to set the focus to the text edit as soon as the app is opened.

- I was able to find a workaround for the .indexOf() method failure. I used the QRegExp.indexIn() method instead which got the syntax highlighter to work.

- I've decided to leave out the Qt.GlobalColor import. I believe i was going about it the wrong way. Instead, I'll use the QColor class to create colors.

- Figured out that Ctrl+W does in fact close the focused tab. I was deceived due to there being no clear difference between the newly opened tabs, and the current tab in focus.

-syntax highlighter works for all newly constructed tabs
- use ESC key to close find bar DockWidget
- Fix settings; it's throwing QVariant errors in console.

- got rid of frame for main textedit area
- reopen last tab ctrl+shift+T
- made the tab text red when the current document has been modified but not saved.
- tab focus text cursor after closing tab
- added stylesheets
- Ctrl+pgup cycles through all tabs now. Error was occuring due to the tab index being zero based. incorrect if statement.
- added func tab_seek_right to move between tabs with ctrl+pgup; not yet working
- syntax highlighter works for all new tabs.
- add action new window, close window
- set elide right, tab bar still brings up scroll bar if too many tabs are open.
- set focus for shortcuts
- set option for modifying the tab width
- set tab options, 2 spaces, 4, 6, 8

IDEAS FROM VARIOUS SOURCES:
==========================

- At this point, i'm not too sure as to what else i should add, so i will paste so ideas here for consideration

Build Engine: add the ability to run code FROM the editor itself. i.e. run code from command-line. e.g. python <name of main>.py etc..

WEB BROWSER: Add a tab that will have it's own process and allow full functional web browsing

E-Mail Client: Provide fast and simple plugin for sending and receiving e-mail

Text Statistics: Add text counting, cursor pos, word count etc.

Thesaurus and Dictionary Spell-Check: Add spell-check engine along with comprehensive dictionary/thesaurus

Side Bar: Add a side bar that will either contain the contents of a Dir, OR some other useful context.

Code Snippets and Libraries: Add pre-defined commonly used snippets of code; Auto-Complete

Utilities Library:

Unit converters (lbs to kg, inches to cm, Fahrenheit to Celsius â€¦)
Password generator
Data encryption and decryption
Uuencoding and uudecoding
Hash generator (using SHA1, MD5, or CRC32)
URL extraction from a web page

Comprehensive SEARCH & REPLACE: add a fast, versatile Find, search and replace.

Custom_Layouts: Add custom layouts

Encoding: Add functionality for all types of encoding

