General NOTES:
==============
=BASE CLASSES OTHERS INHERIT FROM
QWIDGET,QOBJECT,QFRAME, and Qt module for misc functions, attrs, etc.

- i think i may need to construct the findbox QDockWidget separately from the actual logic of the find operation.

- use self.settings.clear() during initial construction if settings begins to throw bothersome errors

- PySide.QtCore.Qt.NavigationMode can be used to change the tab focus behavior

!- I plan on making the whole editor customizable. I will get to the style and various layout options when the CORE functionality is set and stable.

- I think i should develop a separate module for keyboard shortcuts and syntax highlighting classes.

- I think i can modify the x button that appears on the tab by creating a custom widget and setting it with QTabBar.setTabButton()/

- Later on i can make the shortcuts customizable using the isEnabled() method of the QShortcut class.

- i could leave off inializing a new document automatically and instead start the app with a no open tabs.

- browse cxfreeze and github PySide repository. Consider getting into active PySide development and utlizing cxfreeze for PyCode's distribution.

- now that i have styling available, i must consider how to merge this harmoniously with syntax highlighting. Im thinking I can define a complete stylesheet theme that would include the syntax colors with it. i.e. the colors to be used in contrast to the background are defined WITHIN the style sheet.

In order to implement the build system, i will have to use the os module and learn about the different system command line commands that would run the focused tab document.

currently, the mainwindow does not support changing it's layout. This will prove to impede any layout features planned for the future. May have to change main
class to inherit from QWidget instead of QMainWindow

I'm going to attempt to reorganize the editor using more classes. The way it's set up now is too procederual and prone to break.

f_menu = FileMenu(self)
f_menu.create_action("exit_Act")
f_menu.ALL_FILE_ACTIONS.get("exit_Act")

need to find a way to encapsulate all slots while connecting them to their appropriate QAction.trigger






TO-DO LIST:
==========
- when run direcly from the command line, PyCode does not recognize the stylesheet. Fix.
- add regexp search
- need to be able to check if current opened file's location changed, if so, inform the user. OR if the filename has been changed elsewhere.
- make a setting that will hold the current stylesheet and set it on every reload
- make a function that adds an check icon to the relevant syntax in the view syntax menu
- create an option to inverse the currently selected theme. i.e. if background is red and text black, background would change to black and font to red. NOTE: syntax highlighting needs to be taken into consideration.
- need to be able to open a file from open-recent menu without prompting
- save the _closed tab list in settings proper to use after close

- change char selection color from blue to pink
- need to have the text editor automatically recognize file types by extension and set the appropriate syntax highlighting. This should be done with a functiion
	that will RegExp through all available syntax highlighting classes and add it as needed.
- add code folding
- create custom file dialog

- add more complex syntax highlighting code

-get started on adding common shortcut and document abilities. Reasearch and write a list on the most coventional ones i.e. common functionality e.g.
deleting a line, cutting out a line, moving blocks of text etc.

- add a cheat sheet for commonly used programs

- set font options and build more functionality

- utilize a layout for the main window
- make the line/column count update to current tab page as soon as user switches tab page. currently remains the same until user input on new page registers.

- Make a command that copies the entire document and prompts the user for a new filename. Use the QFile object.
- set focus to newly opened files and tabs.

- I will, Inshallah, use QtGui.QCompleter to implement the auto-complete function based upon pre-defined item models. This will automatically look for the commonly
	known blocks of code and fill it in for the user.

- fix the pgdn fail to recognize bug

- add build system and ability to run commands in console from app itself

- add autosave feature

UPDATES SINCE LAST GIT COMMIT:
==============================
NOTED FIXES:
==============
- added current cursor line pos
- allow a untitled tab to appear ONLY when there is no tabs available from previous session. OR get rid of it completely.
- add column count to status bar
- fix find action to highlight found text IN document area
- fixed ambigious shortcut overload. Most specify focused window to close
- I was finally able to get the status bar to reflect the current tab page instead of the just the last action done.
- for now, QPlainTextEdit is fine.

- I was able to set the focus to the text edit as soon as the app is opened.

- I was able to find a workaround for the .indexOf() method failure. I used the QRegExp.indexIn() method instead which got the syntax highlighter to work.

- I've decided to leave out the Qt.GlobalColor import. I believe i was going about it the wrong way. Instead, I'll use the QColor class to create colors.

- Figured out that Ctrl+W does in fact close the focused tab. I was deceived due to there being no clear difference between the newly opened tabs, and the current tab in focus.

- able to reopen a closed application with the previous work state automatically loaded. i.e. same number of tabs and settings
- fix QShortcut throwing Ambiguously activated signal.
- Rewrite the settings definition to NOT use setgeometry.
-syntax highlighter works for all newly constructed tabs
- use ESC key to close find bar DockWidget
- Fix settings; it's throwing QVariant errors in console.

- got rid of frame for main textedit area
- reopen last tab ctrl+shift+T
- made the tab text red when the current document has been modified but not saved.
- tab focus text cursor after closing tab
- added stylesheets
- Ctrl+pgup cycles through all tabs now. Error was occuring due to the tab index being zero based. incorrect if statement.
- added func tab_seek_right to move between tabs with ctrl+pgup; not yet working
- syntax highlighter works for all new tabs.
- add action new window, close window
- set elide right, tab bar still brings up scroll bar if too many tabs are open.
- set focus for shortcuts
- set option for modifying the tab width
- set tab options, 2 spaces, 4, 6, 8

IDEAS FROM VARIOUS SOURCES:
==========================

- At this point, i'm not too sure as to what else i should add, so i will paste so ideas here for consideration

Build Engine: add the ability to run code FROM the editor itself. i.e. run code from command-line. e.g. python <name of main>.py etc..

WEB BROWSER: Add a tab that will have it's own process and allow full functional web browsing

E-Mail Client: Provide fast and simple plugin for sending and receiving e-mail

Text Statistics: Add text counting, cursor pos, word count etc.

Thesaurus and Dictionary Spell-Check: Add spell-check engine along with comprehensive dictionary/thesaurus

Side Bar: Add a side bar that will either contain the contents of a Dir, OR some other useful context.

Code Snippets and Libraries: Add pre-defined commonly used snippets of code; Auto-Complete

Utilities Library:

Unit converters (lbs to kg, inches to cm, Fahrenheit to Celsius â€¦)
Password generator
Data encryption and decryption
Uuencoding and uudecoding
Hash generator (using SHA1, MD5, or CRC32)
URL extraction from a web page

Comprehensive SEARCH & REPLACE: add a fast, versatile Find, search and replace.

Custom_Layouts: Add custom layouts

Encoding: Add functionality for all types of encoding














Project ideas:

embedded linux
CMS
A few different websites
Web Browser
write a program that writes ISO's to USB disks
